(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Edge, Graph, Node, SpatialHash;

SpatialHash = require('./spatial');

Node = (function() {
  function Node(x, y) {
    this.x = x;
    this.y = y;
  }

  Node.prototype.clone = function() {
    return new Node(this.x, this.y);
  };

  Node.prototype.isEqual = function(other) {
    return this.x === other.x && this.y === other.y;
  };

  return Node;

})();

Edge = (function() {
  function Edge(a, b, thickness) {
    this.a = a;
    this.b = b;
    this.thickness = thickness != null ? thickness : 10;
  }

  Edge.prototype.isEqual = function(other) {
    return (this.a.isEqual(other.a)) && (this.b.isEqual(other.b)) || (this.b.isEqual(other.a)) && (this.a.isEqual(other.b));
  };

  Edge.prototype.isAttachedTo = function(node) {
    return (this.a.isEqual(node)) || (this.b.isEqual(node));
  };

  return Edge;

})();

module.exports = Graph = (function() {
  function Graph() {
    this.map = new SpatialHash();
    this.edges = [];
    console.log('edges');
  }

  Graph.prototype.getEdgesAttachedTo = function(node) {
    var e, edges, _i, _len, _ref;
    edges = [];
    _ref = this.edges;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      e = _ref[_i];
      if (e.isAttachedTo(node)) {
        edges.push(e);
      }
    }
    return edges;
  };

  Graph.prototype.hasEdge = function(edge) {
    return (this.getEdge(edge)) !== void 0;
  };

  Graph.prototype.getEdge = function(edge) {
    var e, _i, _len, _ref;
    _ref = this.edges;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      e = _ref[_i];
      if (e.isEqual(edge)) {
        return e;
      }
    }
    return void 0;
  };

  Graph.prototype.addEdge = function(a, b) {
    var edge;
    this.a = a;
    this.b = b;
    edge = this.getEdge({
      a: this.a,
      b: this.b
    });
    if (edge === void 0) {
      edge = new Edge(this.a, this.b);
      this.edges.push(edge);
    }
    return edge;
  };

  Graph.prototype.addNode = function(position) {
    if ((this.map.get(position)) === void 0) {
      return this.map.set(new Node(position.x, position.y));
    }
  };

  Graph.prototype.changeNode = function(old_pos, new_pos) {
    if ((this.map.get(old_pos)) !== void 0) {
      return this.map.change(old_pos, new_pos);
    }
  };

  return Graph;

})();


},{"./spatial":3}],2:[function(require,module,exports){
var Editor, Floorplan, Graph, UndoStack, editor, findIntersection, getLengthAndRotation, removeItemFrom, renderer, stage,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Graph = require('./graph');

stage = null;

renderer = null;

getLengthAndRotation = function(sp, ep) {
  return {
    middle: {
      x: (sp.x + ep.x) / 2,
      y: (sp.y + ep.y) / 2
    },
    length: Math.sqrt((sp.x - ep.x) * (sp.x - ep.x) + (sp.y - ep.y) * (sp.y - ep.y)),
    rotation: Math.atan2(ep.y - sp.y, ep.x - sp.x)
  };
};

findIntersection = function(a, b, a1, b1) {
  var denom, denomPositive, dx, dx1, dxa, dy, dy1, dya, intersection, s, t;
  dx = b.x - a.x;
  dy = b.y - a.y;
  dx1 = b1.x - a1.x;
  dy1 = b1.y - a1.y;
  denom = dx * dy1 - dx1 * dy;
  if (denom === 0) {
    return void 0;
  }
  denomPositive = denom > 0;
  dxa = a.x - a1.x;
  dya = a.y - a1.y;
  s = dx * dya - dy * dxa;
  if ((s < 0) === denomPositive) {
    return void 0;
  }
  t = dx1 * dya - dy1 * dxa;
  if ((t < 0) === denomPositive) {
    return void 0;
  }
  if ((s > denom) === denomPositive || (t > denom) === denomPositive) {
    return void 0;
  }
  t = t / denom;
  return intersection = {
    x: a.x + (t * dx),
    y: a.y + (t * dy)
  };
};

removeItemFrom = function(array, item) {
  var index;
  index = array.indexOf(item);
  if (index > -1) {
    return array.splice(index, 1);
  }
};

Floorplan = (function() {
  function Floorplan() {
    this.walls = [];
  }

  Floorplan.prototype.addWall = function(wall) {
    var diff, intersection, part1, part2, w, _i, _len, _ref;
    diff = [];
    _ref = this.walls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      w = _ref[_i];
      intersection = findIntersection(wall.a, wall.b, w.a, w.b);
      if (intersection !== void 0) {
        diff.push({
          operation: 'remove',
          type: 'wall',
          obj: w
        });
        part1 = {
          a: w.a,
          b: intersection
        };
        diff.push({
          operation: 'add',
          type: 'wall',
          obj: part1
        });
        part2 = {
          a: w.b,
          b: intersection
        };
        diff.push({
          operation: 'add',
          type: 'wall',
          obj: part2
        });
      }
    }
    diff.push({
      operation: 'add',
      type: 'wall',
      obj: wall
    });
    return diff;
  };

  return Floorplan;

})();

UndoStack = (function() {
  function UndoStack() {
    this.stack = [];
    this.redoStack = [];
  }

  UndoStack.prototype.constructUndoable = function(diffArray) {
    var diff, negated, state, _i, _len;
    state = [];
    for (_i = 0, _len = diffArray.length; _i < _len; _i++) {
      diff = diffArray[_i];
      negated = this._negateDiff(diff);
      state.push(negated);
    }
    return this.stack.push(state);
  };

  UndoStack.prototype.constructRedoable = function(diffArray) {
    var diff, negated, state, _i, _len;
    state = [];
    for (_i = 0, _len = diffArray.length; _i < _len; _i++) {
      diff = diffArray[_i];
      negated = this._negateDiff(diff);
      state.push(negated);
    }
    return this.redoStack.push(state);
  };

  UndoStack.prototype._negateAll = function(array) {
    var diff, negated, state, _i, _len;
    state = [];
    for (_i = 0, _len = diffArray.length; _i < _len; _i++) {
      diff = diffArray[_i];
      negated = this._negateDiff(diff);
      state.push(negated);
    }
    return state;
  };

  UndoStack.prototype._negateDiff = function(diff) {
    var negatedDiff;
    negatedDiff = {};
    if (diff.operation === 'add') {
      negatedDiff.operation = 'remove';
    } else if (diff.operation === 'remove') {
      negatedDiff.operation = 'add';
    }
    negatedDiff.type = diff.type;
    negatedDiff.obj = diff.obj;
    return negatedDiff;
  };

  UndoStack.prototype.undo = function() {
    var u;
    u = this.stack.pop();
    this.constructRedoable(u);
    console.log('undo length: ', this.stack.length);
    console.log('redo length: ', this.redoStack.length);
    return u;
  };

  UndoStack.prototype.redo = function() {
    var u;
    u = this.redoStack.pop();
    this.constructUndoable(u);
    console.log('undo length: ', this.stack.length);
    console.log('redo length: ', this.redoStack.length);
    return u;
  };

  return UndoStack;

})();

Editor = (function(_super) {
  __extends(Editor, _super);

  function Editor() {
    Editor.__super__.constructor.call(this);
    this.underlay = new PIXI.Graphics();
    this.underlay.hitArea = new PIXI.Rectangle(0, 0, 800, 600);
    this.underlay.interactive = true;
    this.addChild(this.underlay);
    this.tempGraphics = new PIXI.Graphics();
    this.addChild(this.tempGraphics);
    this.addUnderlayEvents(this.underlay);
    this.floorplan = new Floorplan();
    this.walls = [];
    this.undoStack = new UndoStack();
  }

  Editor.prototype.addUnderlayEvents = function(underlay) {
    underlay.mousedown = (function(_this) {
      return function(e) {
        _this.dragging = true;
        return _this.sp = {
          x: e.global.x,
          y: e.global.y
        };
      };
    })(this);
    underlay.mousemove = (function(_this) {
      return function(e) {
        if (_this.dragging) {
          _this.ep = {
            x: e.global.x,
            y: e.global.y
          };
          _this.tempGraphics.clear();
          _this.tempGraphics.lineStyle(10, 0xaa00aa);
          _this.tempGraphics.moveTo(_this.sp.x, _this.sp.y);
          _this.tempGraphics.lineTo(_this.ep.x, _this.ep.y);
          return renderer.render(stage);
        }
      };
    })(this);
    return underlay.mouseup = (function(_this) {
      return function(e) {
        _this.dragging = false;
        _this.tempGraphics.clear();
        _this.applyDiff(_this.floorplan.addWall({
          a: _this.sp,
          b: _this.ep
        }));
        return renderer.render(stage);
      };
    })(this);
  };

  Editor.prototype.applyDiff = function(diffs, putInUndoStack) {
    var diff, length, rotation, w, wall, wallToDelete, _i, _j, _len, _len1, _ref, _ref1;
    if (putInUndoStack == null) {
      putInUndoStack = true;
    }
    if (putInUndoStack) {
      this.undoStack.constructUndoable(diffs);
    }
    for (_i = 0, _len = diffs.length; _i < _len; _i++) {
      diff = diffs[_i];
      if (diff.operation === 'add') {
        if (diff.type === 'wall') {
          wall = new PIXI.Graphics();
          wall.beginFill(0xffffff * Math.random());
          _ref = getLengthAndRotation(diff.obj.a, diff.obj.b), length = _ref.length, rotation = _ref.rotation;
          wall.drawRect(0, -5, length, 10);
          wall.position.x = diff.obj.a.x;
          wall.position.y = diff.obj.a.y;
          wall.rotation = rotation;
          wall.ref = diff.obj;
          this.addChild(wall);
          this.walls.push(wall);
          this.floorplan.walls.push(diff.obj);
        }
      }
      if (diff.operation === 'remove') {
        if (diff.type === 'wall') {
          wallToDelete = void 0;
          _ref1 = this.walls;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            w = _ref1[_j];
            if (w.ref === diff.obj) {
              wallToDelete = w;
              continue;
            }
          }
          this.removeChild(wallToDelete);
          removeItemFrom(this.walls, wallToDelete);
          removeItemFrom(this.floorplan.walls, wallToDelete.ref);
        }
      }
    }
    console.log('amount of editor  walls: ', this.walls.length);
    return console.log('amount of FP  walls: ', this.floorplan.walls.length);
  };

  return Editor;

})(PIXI.DisplayObjectContainer);

stage = new PIXI.Stage(0x888888);

renderer = new PIXI.autoDetectRenderer();

editor = new Editor();

stage.addChild(editor);

document.body.appendChild(renderer.view);

window.onload = function() {
  return renderer.render(stage);
};

window.undo = function() {
  var d;
  d = editor.undoStack.undo();
  editor.applyDiff(d, false);
  return renderer.render(stage);
};

window.redo = function() {
  var d;
  d = editor.undoStack.redo();
  editor.applyDiff(d, false);
  return renderer.render(stage);
};


},{"./graph":1}],3:[function(require,module,exports){
var SpatialHash;

module.exports = SpatialHash = (function() {
  function SpatialHash() {
    this.map = {};
  }

  SpatialHash.prototype.insert = function(node) {
    var existing;
    existing = this.get(node);
    if (existing !== void 0) {
      return existing;
    }
    return this.set(node);
  };

  SpatialHash.prototype.get = function(node) {
    return this.map["" + node.x + "_" + node.y];
  };

  SpatialHash.prototype.set = function(node) {
    return this.map["" + node.x + "_" + node.y] = node;
  };

  SpatialHash.prototype.remove = function(node) {
    var existing;
    existing = this.get(node);
    if (existing !== void 0) {
      delete this.map["" + node.x + "_" + node.y];
    }
    return existing;
  };

  SpatialHash.prototype.change = function(node, new_pos) {
    var existing;
    existing = this.remove(node);
    existing.x = new_pos.x;
    existing.y = new_pos.y;
    return this.insert(existing, new_pos);
  };

  return SpatialHash;

})();


},{}]},{},[2])
//# sourceMappingURL=data:application/json;base64,
